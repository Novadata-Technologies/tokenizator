name: Build and Deploy Wheels

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
    types: [closed]

permissions:
  contents: write
  actions: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: make test

  build-wheels:
    name: Build Wheels
    needs: test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || startsWith(github.ref, 'refs/tags/')

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            python: "3.11"
            target: x86_64
            manylinux: auto
          - os: ubuntu-latest
            python: "3.12"
            target: x86_64
            manylinux: auto

          # macOS Apple Silicon builds
          - os: macos-latest
            python: "3.11"
            target: aarch64-apple-darwin
          - os: macos-latest
            python: "3.12"
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Rust target
        if: matrix.target != 'x86_64'
        run: rustup target add ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin[patchelf] cffi

      # Linux builds using manylinux
      - name: Build wheels (Linux)
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out wheels --interpreter python${{ matrix.python }}
          sccache: "true"
          manylinux: ${{ matrix.manylinux }}

      # macOS builds
      - name: Build wheels (macOS)
        if: runner.os == 'macOS'
        run: |
          export MACOSX_DEPLOYMENT_TARGET=11.0
          maturin build --release --target ${{ matrix.target }} --out wheels --interpreter python${{ matrix.python }}

      - name: List built wheels
        run: |
          echo "Built wheels:"
          ls -la wheels/

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}-py${{ matrix.python }}
          path: wheels/
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    needs: build-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels
          pattern: wheels-*
          merge-multiple: true

      - name: List downloaded wheels
        run: |
          echo "Downloaded wheels:"
          find all-wheels -name "*.whl" -type f | sort
          echo ""
          echo "Total wheels found: $(find all-wheels -name "*.whl" -type f | wc -l)"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: all-wheels/*.whl
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-latest:
    name: Deploy Latest Wheels
    needs: build-wheels
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels
          pattern: wheels-*
          merge-multiple: true

      - name: List downloaded wheels
        run: |
          echo "Downloaded wheels:"
          find all-wheels -name "*.whl" -type f | sort
          echo ""
          echo "Total wheels found: $(find all-wheels -name "*.whl" -type f | wc -l)"

      - name: Delete existing latest release
        run: |
          gh release delete latest --yes || echo "No existing latest release"
          git push origin --delete latest || echo "No existing latest tag"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create latest release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: "Latest Development Build"
          files: all-wheels/*.whl
          generate_release_notes: false
          draft: false
          prerelease: true
          body: |
            Latest development build from main branch.

            **⚠️ This is a pre-release build - use with caution in production!**

            Auto-generated from commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
